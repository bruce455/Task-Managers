<style>
      body {
        font-family: Arial, sans-serif;
        background: #f0f0f0;
        padding: 20px;
      }
      #calendar {
        max-width: 900px;
        margin: 20px auto;
        background: #fff;
        border: 1px solid #ddd;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 10px;
      }
      form {
        max-width: 900px;
        margin: 20px auto;
        {{!-- background: #fff; --}}
        padding: 20px;
        border: 1px solid #ddd;
        {{!-- box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); --}}
      }
      form label {
        display: block;
        margin-bottom: 5px;
      }
      form input {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }
      form button {
        padding: 10px 20px;
        {{!-- background: #007bff; --}}
        {{!-- color: #fff; --}}
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      form button:hover {
        {{!-- background: #0056b3; --}}
      }
    </style>
      <!-- creating the button-->
      <div class="custom-container">
                <button
                class="btn btn-primary mt-3"
                data-bs-toggle="modal"
                data-bs-target="#exampleModal"
                >
                Create Event
                </button>
                
            </div>
      <!-- Modal -->

    {{> addTaskModal }}
    {{> currentTaskModal }}



    <div id="calendar"></div>

    
  
    <script>
      let calendar;

        document.addEventListener('DOMContentLoaded', function() {
        const calendarEl = document.getElementById('calendar');
        calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'dayGridMonth',
          headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
          },
          events: '/get-events',
          eventClick: async function(info) {
            info.jsEvent.preventDefault();
            
            console.log('taskId:', info.event.extendedProps.task_id);


            const taskId = info.event.extendedProps.task_id;
            if (!taskId) return;

            try {
              const response = await fetch(`/tasks/${taskId}`);
              const task = await response.json();

              document.getElementById('edit-title').value = task.title || '';
              document.getElementById('edit-description').value = task.description || '';
              // document.getElementById('edit-due-date').value = task.due_date?.split('T')[0] || '';
              if (task.due_date) {
                const date = new Date(task.due_date);
                const local = date.getFullYear() + '-' +
                  String(date.getMonth() + 1).padStart(2, '0') + '-' +
                  String(date.getDate()).padStart(2, '0') + 'T' +
                  String(date.getHours()).padStart(2, '0') + ':' +
                  String(date.getMinutes()).padStart(2, '0');
                document.getElementById('edit-due-date').value = local;
                // const date = new Date(task.due_date).slice(0, 16); // "YYYY-MM-DDTHH:MM"
                // document.getElementById('edit-due-date').value = local;
              }

              // document.getElementById('edit-priority').value = task.priority || '';
              // document.getElementById('edit-priority').value = String(task.priority ?? '');
              const priorityInput = document.getElementById('edit-priority');
              if (priorityInput) priorityInput.value = String(task.priority ?? '');

              document.getElementById('edit-reward').value = task.rewards || '';
              document.getElementById('edit-task-id').value = task.task_id || '';

              const modal = new bootstrap.Modal(document.getElementById('edit-task-modal'));
              modal.show();
            } catch (err) {
              console.error('Error loading task for modal:', err);
            }
          }
        });
        calendar.render();
      });

      function saveEvent() {
        const title = document.getElementById('event_name').value;
        const date = document.getElementById('eventDate').value;
        const description = document.getElementById('event_description').value;
        const priority = document.getElementById('event_priority').value;
        const reward = document.getElementById('event_reward').value;

        if (title && date) {
          // Add event to calendar
          calendar.addEvent({
            title: `${title} [${category}]`,
            start: date,
            extendedProps: {
              description: description,
              priority: priority,
              reward: reward
            }
          });

          //Reset the form
          document.getElementById('data-form').reset();

          //close the modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('exampleModal'));
          modal.hide();
        } else {
          alert("Please provide an event title and due date.");
        }
      }
    </script>
 